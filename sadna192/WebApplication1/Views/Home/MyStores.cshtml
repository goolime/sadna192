@using sadna192
@model Store_AddManagerViewModel
@{
    ViewData["Title"] = "MyStores";
}
Store: <h2 id="storeName">@Model.S.StoreName</h2>
<!--if (((I_User_ServiceLayer)ViewData["SL"]).GetUserState().isOwner(Model.S.StoreName))
{
}-->

<button onclick="show_add_owner_form()" id="addOwnerButton">
    @if (ViewData["ownererr"] != null && (bool)ViewData["ownererr"])
    {
        <font>Hide</font>
    }
    else
    {
        <font>Add Owner</font>

    }
</button>
<div id="addOwnerDiv" style="visibility: @(((bool)ViewData["ownererr"])?"visible":"hidden");">
    @if (ViewData["ownererr"] != null && (bool)ViewData["ownererr"])
    {
        <font color="red">could not add Owner</font>
    }
    <form action="/Home/AddOwnerForm" method="post">
        <font color="black">Owner Name: </font>
        <input type="text" name="ownername" title="ownername" />
        @Html.TextBoxFor(s => Model.S.StoreName, null, new { @style = "visibility: hidden;" })<br />
        <input type="submit" />
    </form>
</div>

<button onclick="show_add_manager_form()" id="addManagerButton">
    @if (ViewData["managererr"] != null && (bool)ViewData["managererr"])
    {
        <font>Hide</font>
    }
    else
    {
        <font>Add Manager</font>

    }
</button>
<div id="addManagerDiv" style="visibility:@(((bool)ViewData["managererr"])?"visible":"hidden");">
    @using (Html.BeginForm("AddManagerForm", "Home", FormMethod.Post))
    {
        @if (ViewData["managererr"] != null && (bool)ViewData["managererr"])
        {
            <font color="red">could not add Manager</font><br />
        }
        <font color="black">Manager Name: </font>
        @Html.TextBoxFor(s => s.AM.Name)
        @Html.TextBoxFor(s => Model.S.StoreName, null, new { @style = "visibility: hidden;" })<br />
        <font>Add Permission:</font> @Html.CheckBoxFor(s => s.AM.AddPermission)
        <font>Remove Permission:</font> @Html.CheckBoxFor(s => s.AM.RemovePermission)
        <font>Update Permission:</font> @Html.CheckBoxFor(s => s.AM.UpdatePermission)
        <input type="submit" />
    }
</div>

<button onclick="show_store_management_form()" id="manage">Management</button>
<div id="storeOwnersDiv" style="visibility: hidden;">
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>

            @foreach (Owner owner in ((Store)ViewData["currStore"]).GetOwners())
            {
                <tr>
                    <td>@owner.GetUsername()</td>
                    <td>
                        @if (owner.isManger())
                        {
                            <font>Edit Manager:</font>
                            @using (Html.BeginForm("EditManagerForm", "Home", FormMethod.Post))
                            {
                                @Model.DeleteManagerConfig(owner.GetUsername(), Model.S.StoreName)
                                @Html.HiddenFor(s => Model.S.StoreName)
                                @Html.HiddenFor(s => Model.O.Name)
                                <font>Add Permission:</font> @Html.CheckBoxFor(s => s.AM.AddPermission, ((Manager)owner).permision_add ? new { @checked = "checked" } : null)
                                <font>Remove Permission:</font> @Html.CheckBoxFor(s => s.AM.RemovePermission, ((Manager)owner).permision_remove ? new { @checked = "checked" } : null)
                                <font>Update Permission:</font> @Html.CheckBoxFor(s => s.AM.UpdatePermission, ((Manager)owner).permision_update ? new { @checked = "checked" } : null)
                                <input type="submit" class="btn btn-primary" /><br />
                            }
                            <br />
                            @using (Html.BeginForm("RemoveManagerForm", "Home", FormMethod.Post))
                            {
                                @Model.DeleteManagerConfig(owner.GetUsername(), Model.S.StoreName)
                                @Html.HiddenFor(s => Model.S.StoreName)
                                @Html.HiddenFor(s => Model.O.Name)
                                <font>Remove From Management:</font><input type="submit" class="btn btn-warning" /><br />
                            }

                        }
                        else
                        {

                            @using (Html.BeginForm("RemoveOwnerForm", "Home", FormMethod.Post))
                            {
                                @Model.DeleteOwnerConfig(owner.GetUsername(), ((Store)ViewData["currStore"]).getName());
                                @Html.HiddenFor(s => Model.O.Name);
                                @Html.HiddenFor(s => Model.S.StoreName);

                                <font>Remove Owner:</font><input type="submit" class="btn btn-primary" />


                            }
                        }

                    </td>
                </tr>

            }

        </tbody>
    </table>
</div>

<button onclick="show_add_product_form()" id="addProdButton">Add Product</button>
<div id="addProductDiv" style="visibility: @(((bool)ViewData["producterr"])?"visible":"hidden");">
    @if (ViewData["producterr"] != null && (bool)ViewData["producterr"])
    {
        <font color="red">could not add Product</font>
    }
    @using (Html.BeginForm("AddProductForm", "Home", FormMethod.Post))
    {
        @Html.HiddenFor(s => Model.S.StoreName)
        <font>Product Name:</font>@Html.TextBoxFor(s => s.AP.ProductName)
        <font>Product Amount:</font>@Html.TextBoxFor(s => s.AP.ProductAmount)
        <font>Product Category:</font>@Html.TextBoxFor(s => s.AP.ProductCategory)
        <font>Product Price:</font>@Html.TextBoxFor(s => s.AP.ProductPrice)
        <font>Add:</font><input type="submit" class="btn btn-primary" />


    }
</div>

<button onclick="show_add_discount_form()" id="addDiscountButton">Add Discount</button>
<div id="addDiscount" style="visibility: @((ViewData["alertAddDiscount"]!=null && (bool)ViewData["alertAddDiscount"]) || Model.AD.DiscountVisible? "visible":"hidden")">
    @if (ViewData["alertAddDiscount"] != null && (bool)ViewData["alertAddDiscount"])
    {
        <font color="red"> could not add the discount to the store </font>
    }
    @using (Html.BeginForm("AddDiscountForm", "Home", FormMethod.Post))
    {

        @Html.HiddenFor(s => Model.S.StoreName)
        @Html.HiddenFor(s => Model.O.Name)
        @Html.HiddenFor(s => Model.AD.NumberOfDiscounts)
        <font>Is Products Discount:</font>@Html.CheckBoxFor(s => s.AD.IsProductsDiscount, new { @id = "productsCheckBox", @onchange = "is_product_discount(this)" })
        <div id="productsDiscountForm" style="visibility:hidden">
            Select Logic Connection: @Html.DropDownListFor(s => s.AD.LogicConnection, new SelectList(new List<string>
() { "OR", "AND" }),new { @value="OR",@placeholder="OR"})
            @for (int i = 0; i < Model.AD.NumberOfDiscounts; i++)
            {
                <br /><font color="blue">Discount Number #@(i + 1)</font><br />
                <br />
                @Html.DropDownListFor(s => s.AD.Discounts[i].ProductName, new SelectList(((Store)ViewData["currStore"]).getProductInStore().ConvertAll(s => s.getName())), "Select Product", new { @id = "productname" + i, @placeholder = "Product name" })
                <br />
                @Html.TextBoxFor(s => s.AD.Discounts[i].Amount, new { @placeholder = "Amount" })
                @Html.TextBoxFor(s => s.AD.Discounts[i].DiscountPercent, new { @placeholder = "DiscountPercent" })
                <br />
            }
        </div>
        <div id="storeDiscount">
            @Html.TextBoxFor(s => s.AD.Discounts[0].Amount, new { @placeholder = "Amount" })
            @Html.TextBoxFor(s => s.AD.Discounts[0].DiscountPercent, new { @placeholder = "DiscountPercent" })
        </div>
        <br />
        <font>Is Time Discount:</font>@Html.CheckBoxFor(s => s.AD.TimeSpan.IsTimeLimited, new { @onchange = "show_time_range(this,\"timeDiv\")" })
        <font>Is Included In Store Discount:</font>@Html.CheckBoxFor(s => s.AD.IsStoreDiscount)

        <div id="timeDiv" style="visibility:hidden">
            <font>Start:</font>@Html.TextBoxFor(s => s.AD.TimeSpan.Start, new { @type = "date" })
            <fon>Finish:</fon>@Html.TextBoxFor(s => s.AD.TimeSpan.Finish, new { @type = "date" })
        </div>
        <button name="command" value="add" id="addDiscountButton" style="visibility:hidden">Add a Discount</button>
        <button name="command" value="reset" id="resetDiscount" style="visibility:hidden">Reset Discounts</button>
        <button name="command" input="submit" class="btn btn-success" value="finalize">Finalize Total Discount</button>
    }
</div>


<button onclick="show_add_policy_form()" id="addPolicyButton">Add Policy</button>
<div id="addpolicydiv">
    @if (ViewData["alertAddPolicy"] != null && (bool)ViewData["alertAddPolicy"])
    {
        <font color="red"> could not add the policy to the store </font>
    }
    @using (Html.BeginForm("AddPolicyForm", "Home", FormMethod.Post))
    {

        @Html.HiddenFor(s => Model.S.StoreName)
        @Html.HiddenFor(s => Model.O.Name)
        @Html.HiddenFor(s => Model.APolicy.NumberOfPolicies)
        <font>Is Products Policy:</font>@Html.CheckBoxFor(s => s.APolicy.IsProductsPolicy, new { @id = "productsPolicyCheckBox", @onchange = "is_product_policy(this)" })

        <div id="productsPolicyForm" style="visibility:hidden">
            Select Logic Connection: @Html.DropDownListFor(s => s.APolicy.LogicConnection, new SelectList(new List<string>
() { "OR", "AND" ,"XOR"}),new { @value="AND",@placeholder="AND",@style= Model.APolicy.NumberOfPolicies==1? "visibility:hidden": "visibility:visible" })
            @for (int i = 0; i < Model.APolicy.NumberOfPolicies; i++)
            {
                <br /><font color="blue">Policy Number #@(i + 1)</font><br />
                <br />
                @Html.DropDownListFor(s => s.APolicy.Policies[i].Name, new SelectList(((Store)ViewData["currStore"]).getProductInStore().ConvertAll(s => s.getName())), "Select Product", new { @id = "policyproductname" + i, @placeholder = "Product name" })
                <br />
                @Html.TextBoxFor(s => s.APolicy.Policies[i].Amount, new { @placeholder = "Amount" })
                <br />
                @Html.DropDownListFor(s => s.APolicy.Policies[i].Constraint, new SelectList(new List<string>() { "MAX", "MIN" }), new { @id = "policyconstraint" + i, @placeholder = "MAX/MIN" })

            }
        </div>
        <div id="storePolicy">

        </div>
        <br />
        <font>Is Included In Store Policy:</font>@Html.CheckBoxFor(s => s.APolicy.IncludeStorePolicy)
        <font>Member Policy:</font>@Html.CheckBoxFor(s => s.APolicy.Memebr)
        <font>Member Immidiate:</font>@Html.CheckBoxFor(s => s.APolicy.Immidiate)

        <font>Is Time Policy:</font>@Html.CheckBoxFor(s => s.APolicy.TimeSpan.IsTimeLimited, new { @onchange = "show_time_range(this,\"timePolicyDiv\")" })

        <div id="timePolicyDiv" style="visibility:hidden">
            <font>Start:</font>@Html.TextBoxFor(s => s.APolicy.TimeSpan.Start, new { @type = "date" })
            <fon>Finish:</fon>@Html.TextBoxFor(s => s.APolicy.TimeSpan.Finish, new { @type = "date" })
        </div>
        <button name="command" value="add" id="addAPolicyDivButton" style="visibility:hidden">Add a Discount</button>
        <button name="command" value="reset" id="resetPolicy" style="visibility:hidden">Reset Discounts</button>
        <button name="command" input="submit" class="btn btn-success" value="finalize">Finalize Total Discount</button>
    }
</div>
    Products:
@foreach (ProductInStore product in ((Store)ViewData["currStore"]).getProductInStore())
{
    <div>
        <a class="btn btn-info" asp-area="" asp-controller="Home" asp-action="Product" asp-route-storename="@(((Store)ViewData["currStore"]).getName())" asp-route-productname="@product.getName()">@product.getName()</a>
    </div>
}


<script>
    document.getElementById("storeName").value = "@ViewData["storename"]";
        @if (Model.AD.DiscountVisible) {
            <text>
    document.getElementById("productsCheckBox").checked = true;
    is_product_discount(document.getElementById("productsCheckBox"));

            </text>
        }
    function show_add_owner_form() {
        var isHidden = document.getElementById("addOwnerDiv").style.visibility === "hidden";
        document.getElementById("addOwnerDiv").style.visibility = isHidden ? "visible" : "hidden";
        document.getElementById("addOwnerButton").innerHTML = isHidden ? "Hide" : "Add Owner";

    }

    function show_add_manager_form() {
        var isHidden = document.getElementById("addManagerDiv").style.visibility === "hidden";
        document.getElementById("addManagerDiv").style.visibility = isHidden ? "visible" : "hidden";
        document.getElementById("addManagerButton").innerHTML = isHidden ? "Hide" : "Add Manager";

    }

    function show_store_management_form() {
        var isHidden = document.getElementById("storeOwnersDiv").style.visibility === "hidden";
        document.getElementById("storeOwnersDiv").style.visibility = isHidden ? "visible" : "hidden";
        document.getElementById("manage").innerHTML = isHidden ? "Hide" : "Management";

    }

    function show_add_product_form() {
        var isHidden = document.getElementById("addProductDiv").style.visibility === "hidden";
        document.getElementById("addProductDiv").style.visibility = isHidden ? "visible" : "hidden";
        document.getElementById("addProdButton").innerHTML = isHidden ? "Hide" : "Add Product";

    }

    function show_add_discount_form() {
        var isHidden = document.getElementById('addDiscount').style.visibility === 'hidden';
        document.getElementById('addDiscount').style.visibility = isHidden ? 'visible' : 'hidden';
        document.getElementById("addDiscountButton").innerHTML = isHidden ? "Hide" : "Add Discount";

    }

    function is_product_discount(obj) {
        if (!($(obj).is(":checked"))) {
            document.getElementById("productsDiscountForm").style.visibility = "hidden";
            document.getElementById("storeDiscount").style.visibility = "visible";
            document.getElementById("addDiscountButton").style.visibility = "hidden";
            document.getElementById("resetDiscount").style.visibility = "hidden";
        } else {
            document.getElementById("productsDiscountForm").style.visibility = "visible";
            document.getElementById("storeDiscount").style.visibility = "hidden";
            document.getElementById("addDiscountButton").style.visibility = "visible";
            document.getElementById("resetDiscount").style.visibility = "visible";
        }
    }

    function is_product_policy(obj) {
        if (!($(obj).is(":checked"))) {
            document.getElementById("productsPolicyForm").style.visibility = "hidden";
            document.getElementById("storePolicy").style.visibility = "visible";
            document.getElementById("addAPolicyDivButton").style.visibility = "hidden";
            document.getElementById("resetPolicy").style.visibility = "hidden";
        } else {
            document.getElementById("productsPolicyForm").style.visibility = "visible";
            document.getElementById("storePolicy").style.visibility = "hidden";
            document.getElementById("addAPolicyDivButton").style.visibility = "visible";
            document.getElementById("resetPolicy").style.visibility = "visible";
        }
    }

    function show_time_range(obj,domeName) {
        if ($(obj).is(":checked")) {
            document.getElementById(domeName).style.visibility = "visible";
        } else {
            document.getElementById(domeName).style.visibility = "hidden";
        }
    }

     function show_add_policy_form() {
         var isHidden = document.getElementById('addpolicydiv').style.visibility === 'hidden';
         document.getElementById('addpolicydiv').style.visibility = isHidden ? 'visible' : 'hidden';
         document.getElementById("addPolicyButton").innerHTML = isHidden ? "Hide" : "Add Policy";
    }
</script>




